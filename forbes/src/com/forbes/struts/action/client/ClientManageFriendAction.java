/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.client;


import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.forbes.hibernate.bean.User;
import com.forbes.hibernate.bean.UserFriend;
import com.forbes.service.user.UserFriendManager;
import com.forbes.service.user.UserInfoManager;
import com.forbes.util.Pager;
import com.forbes.util.UrlTool;

/** 
 * MyEclipse Struts
 * Creation date: 07-09-2007
 * 
 * XDoclet definition:
 * @struts.action path="/client/ClientLogin" name="clientLoginForm" attribute="ClientLoginForm" input="/client/ClientLogin.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/client/ClientLoginOk.jsp"
 * @struts.action-forward name="fail" path="/client/ClientLoginFail.jsp"
 */
public class ClientManageFriendAction extends DispatchAction {
	/*#com.she.web.form.client.ClientLoginForm Dependency20*/
/*
	 * Generated Methods
	 */

	
	private  UserFriendManager userFriendManager;
	
	private UserInfoManager userInfoManager;
	
	
	/** 
	 * ¿Í»§µÇä›
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String pageNo  = request.getParameter("pno");
		String orderby = request.getParameter("orderby");
		User user 	   = (User)request.getSession().getAttribute("CLIENT");
		
		try{
			Map map = new TreeMap();
			map.put("orderby", orderby);
			
			int iPageNo = 1;
			try {
				if( pageNo != null ){
					iPageNo = Integer.parseInt( pageNo );
				}
			} catch( Exception e ){ }

			List list = null;
			Pager pager = new Pager();
			pager.setCntOfPage( 5 );
			pager.setCurPage( iPageNo );
			
			list = userFriendManager.getUserFriendByPage( pager, iPageNo, user.getId().toString(), orderby);

			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			request.setAttribute( "FRIEND_LIST", list);
			
			//System.out.println(" ClientManageFriendAction list = "+list.size());
			
			return mapping.findForward("list");
		}catch( Exception e ){
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}


	public UserFriendManager getUserFriendManager() {
		return userFriendManager;
	}


	public void setUserFriendManager(UserFriendManager userFriendManager) {
		this.userFriendManager = userFriendManager;
	}
	
	
	public ActionForward del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String 		  id = request.getParameter("id");
		String returnUrl = request.getParameter("returnUrl");
		
		try{
			UserFriend userFriend = userFriendManager.getUserFriend( Long.parseLong(id) );
			
			
				try {
					userFriendManager.deleteUserFriend(userFriend);
					
					request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]") );
					return mapping.findForward("ok");
				}catch (Exception e) {
					
					return mapping.findForward("fail");
				}
				
			
		}catch( Exception e ){
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}

	
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String 		 fid = request.getParameter("fid");
		String returnUrl = request.getParameter("returnUrl");
		
		User user 	   = (User)request.getSession().getAttribute("CLIENT");
		
		try{
			
			if( !userFriendManager.checkIfFriend(user.getId(), Integer.parseInt(fid))) {
				User friend = userInfoManager.getUser(Integer.parseInt(fid));
				UserFriend userFriend = new UserFriend();
				userFriend.setUserId(user.getId());
				userFriend.setFriend(friend);
				userFriend.setFriendLoginname(friend.getLoginName());
				userFriend.setNote("");
				userFriendManager.addUserFriend(userFriend);
					//userFriendManager.getUserFriend( Long.parseLong(id) );
				return mapping.findForward("fail");
			}
			else {
				
				request.setAttribute("OK_MESSAGE", "");
				return mapping.findForward("fail");
			}
				
			
		}catch( Exception e ){
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}


	public UserInfoManager getUserInfoManager() {
		return userInfoManager;
	}


	public void setUserInfoManager(UserInfoManager userInfoManager) {
		this.userInfoManager = userInfoManager;
	}
	
}