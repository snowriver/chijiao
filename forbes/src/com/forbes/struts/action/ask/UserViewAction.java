/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.ask;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.forbes.hibernate.bean.UcMembers;
import com.forbes.service.account.ScoreManager;
import com.forbes.service.ask.AskSearchManager;
import com.forbes.service.user.UserInfoManager;
import com.forbes.util.DictionaryManager;
import com.forbes.util.Pager;

/** 
 * MyEclipse Struts
 * Creation date: 09-20-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */

public class UserViewAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	//private VideoTypeManager videoTypeManager;
	
	private UserInfoManager userInfoManager;
	
	private AskSearchManager askSearchManager;
	
	private ScoreManager scoreManager;
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward ask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		//System.out.println(" user ask SearchAction...");
		String uid = request.getParameter("uid");
		String typeid    = null;
		String status    = "0_1";
		String keyword   = null;
		String orderby   = null;
		String pageNo    = request.getParameter("pno");
		
		
		//String parameter = "keyword=" + ( (keyword==null)?" ":keyword );
		
		Map map = new TreeMap();
		map.put("uid", uid);
		map.put("keyword", keyword);
		map.put("typeid", typeid);
		map.put("status", status);
		map.put("orderby", orderby);
		
		try {
			
			UcMembers user = userInfoManager.getUcMember(Integer.parseInt(uid));
			
			Short accountType = DictionaryManager.getInstance().getVal("ACCOUNT_TYPE", "2").getDvalue();
			request.setAttribute("BANLANCE", scoreManager.getBalance(user.getUid().toString(), 
					accountType.toString()));
			
			int iPageNo = 1;
			try {
				if( pageNo != null ){
					iPageNo = Integer.parseInt( pageNo );
				}
			} catch( Exception e ){ }

			List list = null;
			Pager pager = new Pager();
			pager.setCntOfPage( 10 );
			pager.setCurPage( iPageNo );
			
			list = askSearchManager.getAskByPage(pager, iPageNo, user.getUid().toString(), typeid, status, keyword, orderby);

			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			request.setAttribute( "ASK_LIST", list);
			request.setAttribute( "USER", user);
			return mapping.findForward("ask");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
	public UserInfoManager getUserInfoManager() {
		return userInfoManager;
	}
	public void setUserInfoManager(UserInfoManager userInfoManager) {
		this.userInfoManager = userInfoManager;
	}

	public AskSearchManager getAskSearchManager() {
		return askSearchManager;
	}

	public void setAskSearchManager(AskSearchManager askSearchManager) {
		this.askSearchManager = askSearchManager;
	}
	
	public ActionForward answer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String uid = request.getParameter("uid");
		String pageNo  = request.getParameter("pno");
		String orderby = request.getParameter("orderby");
		
		UcMembers user = userInfoManager.getUcMember(Integer.parseInt(uid));
		
		try{
			Map map = new TreeMap();
			map.put("orderby", orderby);
			map.put("uid", uid);

			
			int iPageNo = 1;
			try {
				if( pageNo != null ){
					iPageNo = Integer.parseInt( pageNo );
				}
			} catch( Exception e ){ }

			List list = null;
			Pager pager = new Pager();
			pager.setCntOfPage( 10 );
			pager.setCurPage( iPageNo );
			
			list = askSearchManager.getAskByAnswerAndPage(pager, iPageNo, user.getUid().toString(), orderby );
				//userFriendManager.getUserFriendByPage( pager, iPageNo, user.getId().toString(), orderby);
			
			Short accountType = DictionaryManager.getInstance().getVal("ACCOUNT_TYPE", "2").getDvalue();
			request.setAttribute("BANLANCE", scoreManager.getBalance(user.getUid().toString(), 
					accountType.toString()));

			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			request.setAttribute( "ASK_LIST", list);
			request.setAttribute( "USER", user);
			return mapping.findForward("answer");
		}catch( Exception e ){
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}

	public ScoreManager getScoreManager() {
		return scoreManager;
	}

	public void setScoreManager(ScoreManager scoreManager) {
		this.scoreManager = scoreManager;
	}
	
}