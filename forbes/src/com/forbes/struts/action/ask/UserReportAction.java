/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.ask;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.forbes.hibernate.bean.Ask;
import com.forbes.hibernate.bean.AskAnswer;
import com.forbes.hibernate.bean.FeedBack;
import com.forbes.hibernate.bean.UcMembers;
import com.forbes.service.account.ScoreManager;
import com.forbes.service.ask.AskAnswerManager;
import com.forbes.service.ask.AskSearchManager;
import com.forbes.service.feedback.FeedBackManager;
import com.forbes.service.user.UserInfoManager;
import com.forbes.util.DictionaryManager;
import com.forbes.util.Pager;

/** 
 * MyEclipse Struts
 * Creation date: 09-20-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */

public class UserReportAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	//private VideoTypeManager videoTypeManager;
	
	private AskAnswerManager askAnswerManager;
	
	private AskSearchManager askSearchManager;
	
	private  FeedBackManager feedBackManager;
	
	public FeedBackManager getFeedBackManager() {
		return feedBackManager;
	}

	public void setFeedBackManager(FeedBackManager feedBackManager) {
		this.feedBackManager = feedBackManager;
	}

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward getask(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
			String id  = request.getParameter("id");
			Ask ask    = askSearchManager.getAsk(Integer.parseInt(id));
			
			request.setAttribute( "REPORT_TYPE", "5");
			request.setAttribute( "USER_ID", ask.getUserId());
			request.setAttribute( "USER_NAME", ask.getUsername());
			request.setAttribute( "OBJECT_ID", ask.getId());
			return mapping.findForward("get");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
	public ActionForward getanswer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
			
			String id  = request.getParameter("id");
			AskAnswer askAnswer    = askAnswerManager.getAskAnswer(Long.parseLong(id));
			
			request.setAttribute( "REPORT_TYPE", "6");
			request.setAttribute( "USER_ID", askAnswer.getUserId());
			request.setAttribute( "USER_NAME", askAnswer.getLoginName());
			request.setAttribute( "OBJECT_ID", askAnswer.getId());
			return mapping.findForward("get");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	

	public AskSearchManager getAskSearchManager() {
		return askSearchManager;
	}

	public void setAskSearchManager(AskSearchManager askSearchManager) {
		this.askSearchManager = askSearchManager;
	}

	public AskAnswerManager getAskAnswerManager() {
		return askAnswerManager;
	}

	public void setAskAnswerManager(AskAnswerManager askAnswerManager) {
		this.askAnswerManager = askAnswerManager;
	}
	
	
	public ActionForward report(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String userid   = request.getParameter("userId");
		String content = request.getParameter("content");
		String reportType = request.getParameter("reportType");
		String errorType = request.getParameter("errorType");
		String objectId = request.getParameter("objectId");
		
		String msg = "";
		if(reportType.equals("5")) {			
			Ask ask    = askSearchManager.getAsk(Integer.parseInt(objectId));
			msg = ask.getId() +". " + ask.getTitle() + " 提问举报，举报内容：";
		}
		else {		
			AskAnswer askAnswer    = askAnswerManager.getAskAnswer(Long.parseLong(objectId));
			msg = askAnswer.getId() +". " + askAnswer.getContent() + " 回答举报，举报内容：";
		}
		try{
			FeedBack fd = new FeedBack();
			fd.setEmail(null);
			fd.setErrorContent(msg + content);
			fd.setFeedType((short)3);
			fd.setErrorType(new Short(errorType) );
			fd.setUserId(Integer.parseInt(userid));
			fd.setFeedTime(new Date());
			feedBackManager.addFeedBack(fd);
			request.setAttribute("OK_MESSAGE", "提交成功，谢谢您的参与！");
			/*request.setAttribute("OK_MESSAGE", "提交成功，谢谢您的参与！");
			request.setAttribute("RETURN_URL", "index.jsp");*/
			return mapping.findForward("ok");
		}catch( Exception e ){
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	
}