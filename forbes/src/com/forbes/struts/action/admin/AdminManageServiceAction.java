/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.admin;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.forbes.hibernate.bean.OrderService;
import com.forbes.hibernate.bean.Video;
import com.forbes.service.order.OrderServiceManager;
import com.forbes.struts.form.admin.AdminAddServiceForm;
import com.forbes.util.Pager;
import com.forbes.util.UrlTool;

/** 
 * MyEclipse Struts
 * Creation date: 09-07-2007
 * 
 * XDoclet definition:
 * @struts.action path="/admin/AdminListService" name="adminListServiceForm" input="/admin/AdminListService.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/admin/AdminListService.jsp"
 * @struts.action-forward name="fail" path="/admin/AdminListServiceFail.jsp"
 */
public class AdminManageServiceAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private OrderServiceManager orderServiceManager;
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String keyword   = request.getParameter("keyword");
		String orderby   = request.getParameter("orderby");
		String pageNo    = request.getParameter("pno");
		String type 	 = request.getParameter("type");
		String parameter = "type=" + ( (type==null)?"":type ) +
		   				   "&keyword=" + ( (keyword==null)?"":keyword );
		
		Map map = new TreeMap();
		map.put("keyWord", keyword);
		map.put("orderby", orderby);
		map.put("type", type);
		map.put("parameter", parameter);
		
		try {
			int iPageNo = 1;
			try {
				if( pageNo != null ){
					iPageNo = Integer.parseInt( pageNo );
				}
			} catch( Exception e ){ }

			List list = null;
			Pager pager = new Pager();
			pager.setCntOfPage( 10 );
			pager.setCurPage( iPageNo );
			
			//List list = orderServiceManager.listOrderService();
			list = orderServiceManager.getOrderServiceByPage(pager, iPageNo, type, keyword, orderby);
			
			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			System.out.println(" list size = " + list.size());
			request.setAttribute("SERVICE_LIST", list);
			return mapping.findForward("list");
		} catch (Exception e) {
			return mapping.findForward("fail");
		}
	}

	
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			AdminAddServiceForm adminAddServiceForm = (AdminAddServiceForm) form;
			
			OrderService orderService = new OrderService();
			orderService.setServiceNameCh(adminAddServiceForm.getServiceName());
			orderService.setServiceType(new Short(adminAddServiceForm.getServiceType()));
			orderService.setPrice(new Integer(adminAddServiceForm.getPrice()));
			orderService.setDiscount(new Short(adminAddServiceForm.getDiscount()));
			orderService.setServiceDisp( adminAddServiceForm.getServiceDisp() );
			orderService.setServiceCount( adminAddServiceForm.getServiceCount() );
			orderService.setDealClass( adminAddServiceForm.getDealClass() );
			orderService.setServiceUser( adminAddServiceForm.getServiceUser() );
			orderService.setServiceDescs( adminAddServiceForm.getServiceDescs() );
			orderService.setNeedConfirm( adminAddServiceForm.getNeedConfirm() );
			orderService.setNeedCsDeal( adminAddServiceForm.getNeedCsDeal() );
			orderService.setChargeNote( adminAddServiceForm.getChargeNote() );
			orderServiceManager.addOrderService(orderService);
			
			request.setAttribute("OK_MESSAGE", "添加服务成功！");
			request.setAttribute("RETURN_URL", "AdminManageService.do?act=list");
			return mapping.findForward("ok");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	public ActionForward detail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
            String sid = request.getParameter("osid");
            String returnUrl = request.getParameter("returnUrl");
            
			OrderService orderService = orderServiceManager.getOrderServiceDAO().findById( new Integer(sid) );
			System.out.println("-----------------xg");
			request.setAttribute( "RETURN_URL", returnUrl );
			request.setAttribute( "DETAIL", orderService );
			return mapping.findForward("detail");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			AdminAddServiceForm adminAddServiceForm = (AdminAddServiceForm) form;
			String sid 		 = request.getParameter("osid");
			String returnUrl = request.getParameter("returnUrl");
			OrderService orderService = orderServiceManager.getOrderServiceDAO().findById( new Integer(sid) );
			

			orderService.setServiceNameCh(adminAddServiceForm.getServiceName());
			orderService.setServiceType(new Short(adminAddServiceForm.getServiceType()));
			orderService.setPrice(new Integer(adminAddServiceForm.getPrice()));
			orderService.setDiscount(new Short(adminAddServiceForm.getDiscount()));
			orderService.setServiceDisp( adminAddServiceForm.getServiceDisp() );
			orderService.setServiceCount( adminAddServiceForm.getServiceCount() );
			orderService.setDealClass( adminAddServiceForm.getDealClass() );
			orderService.setServiceUser( adminAddServiceForm.getServiceUser() );
			orderService.setServiceDescs( adminAddServiceForm.getServiceDescs() );
			orderService.setNeedConfirm( adminAddServiceForm.getNeedConfirm() );
			orderService.setNeedCsDeal( adminAddServiceForm.getNeedCsDeal() );
			orderService.setChargeNote( adminAddServiceForm.getChargeNote() );
			orderServiceManager.updateOrderService(orderService);
			
			request.setAttribute( "OK_MESSAGE", "修改服务成功！" );
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]") );
			return mapping.findForward("ok");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String returnUrl = request.getParameter("returnUrl");
		try{
			String serviceID     = request.getParameter("serviceID");
			String orderServiceId = ""; //`
			System.out.println(serviceID);
			String serviceIDs [] = serviceID.split("`");
			
			for(int i=0; i<serviceIDs.length; i++) {
				orderServiceId = serviceIDs[i];
				System.out.println(orderServiceId);

				//String orderServiceId = request.getParameter("ordServiceId");
				orderServiceManager.delOrderService( orderServiceId );
			}
			
		
		}catch( Exception e ){
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
		
		request.setAttribute( "OK_MESSAGE", "删除服务成功！" );
		request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]") );
		return mapping.findForward("ok");
	}
	
	public OrderServiceManager getOrderServiceManager() {
		return orderServiceManager;
	}

	public void setOrderServiceManager(OrderServiceManager orderServiceManager) {
		this.orderServiceManager = orderServiceManager;
	}
}