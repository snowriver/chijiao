/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.admin;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.forbes.hibernate.bean.ArticleType;
import com.forbes.hibernate.bean.SearchKeyword;
import com.forbes.service.article.ArticleKeywordManager;
import com.forbes.service.article.ArticleTypeManager;
import com.forbes.service.article.SearchKeywordManager;
import com.forbes.util.Pager;
import com.forbes.util.UrlTool;


/** 
 * MyEclipse Struts
 * Creation date: 09-20-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class AdminManageSearchKeywordAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private SearchKeywordManager searchKeywordManager;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String pageNo     = request.getParameter("pno");
		String keyword    = request.getParameter("keyword");
		String orderby    = request.getParameter("orderby");
		
		String parameter = "&keyword=" + ( (keyword==null)?"":keyword ) +
						   "&orderby=" + ( (orderby==null)?"":orderby ) ;
		
		Map map = new TreeMap();
		map.put("keyword", keyword);
		map.put("orderby", orderby);
		map.put("parameter", parameter);

		System.out.println(" keyword=" + keyword);
		
		int iPageNo = 1;
		try {
			if( pageNo != null ){
				iPageNo = Integer.parseInt( pageNo );
			}
		} catch( Exception e ){ }

		List list = null;
		Pager pager = new Pager();
		pager.setCntOfPage( 10 );
		pager.setCurPage( iPageNo );
		
		try {
		
			list = searchKeywordManager.getSearchKeywordByPage(pager, iPageNo, keyword, orderby);
			
			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			request.setAttribute( "SEARCH_KEYWORD_LIST", list);
			return mapping.findForward("list");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	public SearchKeywordManager getSearchKeywordManager() {
		return searchKeywordManager;
	}
	public void setSearchKeywordManager(SearchKeywordManager searchKeywordManager) {
		this.searchKeywordManager = searchKeywordManager;
	}
	
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String keyword  	 = request.getParameter("keyword").trim();
		String spwords   	 = request.getParameter("spwords");
		String count   	     = request.getParameter("count");
		String returnUrl 	 = request.getParameter("returnUrl");
		
		try {
			
			List list = searchKeywordManager.getSearchKeywordByKeyword(keyword);
			if(list.size() >0) {
				request.setAttribute("FAIL_MESSAGE", "【" + keyword + " 】关键词已经存在。");
				return mapping.findForward("fail");
			}
			else {
				SearchKeyword sk = new SearchKeyword();
				sk.setKeyword(keyword);
				sk.setSpwords(spwords);
				sk.setCount(0);
				if ( count != null && count.length() > 0)
					sk.setCount(Integer.parseInt(count));
				sk.setIstag(new Short("0"));
				sk.setLasttime(new Date());
				sk.setMonthcc(0);
				sk.setMonthup(0);
				sk.setResult(0);
				sk.setStarttime(0);
				sk.setWeekcc(0);
				sk.setWeekup(0);
				searchKeywordManager.addSearchKeyword(sk);
				request.setAttribute( "OK_MESSAGE", "添加搜索关键词成功！");
				
				request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
				return mapping.findForward("ok");
			}
		
			

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String id  	     = request.getParameter("id");
		String returnUrl = request.getParameter("returnUrl");
		
		try {
		
			SearchKeyword sk = searchKeywordManager.getSearchKeyword(Integer.parseInt(id));
			searchKeywordManager.deleteSearchKeyword(sk);
			request.setAttribute( "OK_MESSAGE", "删除搜索关键词成功！");
			
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
			return mapping.findForward("ok");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
	
	public ActionForward batchdelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String kids []   = request.getParameterValues("kids");
		String returnUrl = request.getParameter("returnUrl");
		
		try {
		
			for( int i=0; i< kids.length; i++) {
				
				SearchKeyword sk = searchKeywordManager.getSearchKeyword(Integer.parseInt(kids[i]));
				searchKeywordManager.deleteSearchKeyword(sk);
			}

			request.setAttribute( "OK_MESSAGE", "删除搜索关键词成功！");
			
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
			return mapping.findForward("ok");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
	
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String id        = request.getParameter("id");
		String keyword   = request.getParameter("keyword");
		String spwords   = request.getParameter("spwords");
		String count     = request.getParameter("count");
		String returnUrl = request.getParameter("returnUrl");
		
		try {
		
			SearchKeyword sk = searchKeywordManager.getSearchKeyword(Integer.parseInt(id));
			sk.setCount(Integer.parseInt(count));
			sk.setKeyword(keyword);
			sk.setSpwords(spwords);
			searchKeywordManager.updateSearchKeyword(sk);

			request.setAttribute( "OK_MESSAGE", "更新搜索关键词成功！");
			
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
			return mapping.findForward("ok");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}


	
}