/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.admin;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.forbes.hibernate.bean.Article;
import com.forbes.hibernate.bean.Content;
import com.forbes.hibernate.bean.ArticleType;
import com.forbes.hibernate.bean.Sector;
import com.forbes.hibernate.bean.UcMembers;
import com.forbes.service.account.ScoreManager;
import com.forbes.service.article.ArticleTypeManager;
import com.forbes.service.article.ContentManager;
import com.forbes.service.article.ArticleListManager;
import com.forbes.service.basic.SectorManager;
import com.forbes.struts.form.admin.AdminUploadFileForm;
import com.forbes.struts.form.article.ArticleInfoForm;
import com.forbes.util.DictionaryManager;
import com.forbes.util.Pager;
import com.forbes.util.UploadFile;
import com.forbes.util.UrlTool;


/** 
 * MyEclipse Struts
 * Creation date: 09-20-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class AdminBatchAddArticleAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	//private ArticleListManager articleListManager;
	private ArticleListManager articleListManager;
	
	private ArticleTypeManager articleTypeManager;
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward url(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String fromUrl 	 = request.getParameter("url");
		String returnUrl = request.getParameter("returnUrl");
		try {
			URL url = new URL(fromUrl);//建立URL对象，并实例化为url，获得要抓取的网页地址
			BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(),"gbk"));//建立BufferedReader对象，并实例化为reader，这里的GB2312是要抓取的网页编码格式
			String line;
			String content = "";
	        while ((line = reader.readLine()) != null) {
	            content += line + "\n";
	            //content += line;
	        }
			reader.close();
			
			/*Writer out = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(toUrl), "UTF8"));
			out.write(content); 
			out.close();*/
			String title = content.substring(content.indexOf("<font size=5 ><br>")+33, content.indexOf("</font></span></div></td>"));
			
			String articleContent = content.substring(content.indexOf("font-size: 10.5pt;font-weight:normal ;LINE-HEIGHT: 22px;margin:15px 25px;")+75, 
					content.indexOf("<!-- 发给好友 -->")-65);
			
			String tag = content.substring(content.indexOf("标签:")+4, 
					content.indexOf("font-size: 10.5pt;font-weight:normal ;LINE-HEIGHT: 22px;margin:15px 25px;")-40);
			
			tag = tag.replace("<A HREF=/cgi-bin/listag.cgi?k=", " ");
			tag = tag.replace("&t=1 Target=_blank>", "");
			tag = tag.replace("&t=2 Target=_blank>", "");
			tag = tag.replace("</A>", "");
			System.out.println(tag);

			request.setAttribute("TITLE", title);
			request.setAttribute("CONTENT", articleContent);
			request.setAttribute("TAG", tag);
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
			return mapping.findForward("ok");
		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}

	public ArticleListManager getArticleListManager() {
		return articleListManager;
	}

	public void setArticleListManager(ArticleListManager articleListManager) {
		this.articleListManager = articleListManager;
	}

	public ArticleTypeManager getArticleTypeManager() {
		return articleTypeManager;
	}

	public void setArticleTypeManager(ArticleTypeManager articleTypeManager) {
		this.articleTypeManager = articleTypeManager;
	}
	
	public ActionForward access(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		AdminUploadFileForm adminUploadFileForm = (AdminUploadFileForm) form;
		String returnUrl = request.getParameter("returnUrl");
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		//System.out.println(returnUrl);
		UcMembers member = (UcMembers)request.getSession().getAttribute("ADMIN");
		
		if ( adminUploadFileForm.getFile() != null ) {
			FormFile file   = adminUploadFileForm.getFile();
			
			String ext = "";
			
			if(file.getFileSize() > 0 && file.getFileSize() <= 30000000){
				System.out.println(" 大小：" + file.getFileSize());
				System.out.println(" 后缀：" + file.getFileName().substring(file.getFileName().lastIndexOf(".")) );
				
				ext = file.getFileName().substring(file.getFileName().lastIndexOf("."));
				if( ext.toLowerCase().equals(".mdb") ) {
					 String accessurl = new UploadFile().upload(file, request, "UploadFile/access");
					 System.out.println(accessurl);
					 
					 
					 //
					 //String driver = "sun.jdbc.odbc.JdbcOdbcDriver";
					 String url="jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=" + accessurl;
				 
					 String sql="select 标题,内容 from content ";

					 //String url = "jdbc:odbc:Driver={MicroSoft Access Driver  *.mdb)};DBQ = Northwind.mdb";
					  String username = "";
					  String password = "";
					  Connection conn = null;
					  Statement stmt  = null;
					  ResultSet rs    = null;
					  int addCnt	  = 0;
					  int totalCnt	  = 0;
					  try {
						  Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
						  conn = DriverManager.getConnection(url,username,password); 
						  stmt = conn.createStatement();
						  rs   = stmt.executeQuery(sql);
						  
						  while(rs.next()) {
							  String title 	 = rs.getString(1);
							  String content = rs.getString(2);
							  
							  if(articleListManager.verifyTitle(title.trim())) {
								  
								  Article a = new Article();
								  	a.setIsdelete("N");
									a.setUser( member );
									a.setUsername(member.getUsername());
									a.setUserip( request.getLocalAddr() );
									a.setPubdate( new Date() );
									a.setTitle( title.trim() );
									a.setShorttitle( title.trim() );
									a.setContent( content );
									a.setClick( 0 );
									a.setIscommend( new Short("0") );
									a.setIsverify( new Short("0") );
									a.setDigg( 0 );
									
									if (adminUploadFileForm.getType() !=null ) {
										ArticleType at = articleTypeManager.getArticleType( Integer.parseInt(adminUploadFileForm.getType()) );
										a.setArticleType(at);
									}
									articleListManager.addArticle(a);
								  System.out.println(title.trim());
								  //System.out.println(rs.getString(2));
							  	  //System.out.println();
								  addCnt ++;
								  totalCnt ++;
									
							  }
							  else
								  totalCnt ++;
							  
						  }

					  } 
					  catch(SQLException e) {
						  e.printStackTrace();
					  } catch(ClassNotFoundException ex) {
						  ex. printStackTrace();
					  }

					  
					 //
					 request.setAttribute( "RESULT_MESSAGE", "数据库共" + totalCnt +"条记录，成功添加" + addCnt +"条记录");
					 return mapping.findForward("access");
				}
				else {
					request.setAttribute("FAIL_MESSAGE", "只能上传Access文件!");
					return mapping.findForward("fail");
				}
				
			}
			else {
				request.setAttribute("FAIL_MESSAGE", "请选择上传的文件或者您上传的文件过大，不能大于30M!");
				return mapping.findForward("fail");
			}
		}
		
		else {
			
			request.setAttribute("FAIL_MESSAGE", "请上传Access文件。");
			return mapping.findForward("fail");
		}
	}
	
	
}