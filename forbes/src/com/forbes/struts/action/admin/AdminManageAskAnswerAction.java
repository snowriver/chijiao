/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.admin;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.forbes.hibernate.bean.Article;
import com.forbes.hibernate.bean.ArticleType;
import com.forbes.hibernate.bean.Ask;
import com.forbes.hibernate.bean.AskAnswer;
import com.forbes.hibernate.bean.UserLevel;
import com.forbes.service.article.ArticleListManager;
import com.forbes.service.article.ArticleTypeManager;
import com.forbes.service.ask.AskAnswerManager;
import com.forbes.service.ask.AskManager;
import com.forbes.service.ask.AskSearchManager;
import com.forbes.util.Pager;
import com.forbes.util.UrlTool;



/** 
 * MyEclipse Struts
 * Creation date: 09-20-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class AdminManageAskAnswerAction extends DispatchAction {
	
	private AskSearchManager askSearchManager;
	
	//private AskManager askManager;
	
	private AskAnswerManager askAnswerManager;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	
	
	public AskSearchManager getAskSearchManager() {
		return askSearchManager;
	}
	
	
	public void setAskSearchManager(AskSearchManager askSearchManager) {
		this.askSearchManager = askSearchManager;
	}
	
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println(" search ask list...");
		String askid     = request.getParameter("askid");
		String orderby   = request.getParameter("orderby");
		String pageNo    = request.getParameter("pno");
		
		String flag     = request.getParameter("flag");
		String parameter = "askid=" + ( (askid==null)?" ":askid ) +
						   "&orderby=" + ( (orderby==null)?" ":orderby );
		
		Map map = new TreeMap();
		map.put("askid", askid);
		map.put("orderby", orderby);
		map.put("parameter", parameter);
		
		try {
			
			Ask ask = askSearchManager.getAsk(Integer.parseInt(askid));
			//ask.setViews(ask.getViews() + 1);
			//askManager.updateAsk(ask);
			request.setAttribute( "ASK", ask);
			
			int iPageNo = 1;
			try {
				if( pageNo != null ){
					iPageNo = Integer.parseInt( pageNo );
				}
			} catch( Exception e ){ }

			List list = null;
			Pager pager = new Pager();
			pager.setCntOfPage( 10 );
			pager.setCurPage( iPageNo );
			
			list = askAnswerManager.getAskAnswerByPage(pager, iPageNo, Integer.parseInt(askid), orderby);

			request.setAttribute( "PARA", map );
			request.setAttribute( "PAGER", pager );
			request.setAttribute( "ASK_ANSWER_LIST", list);
			
			System.out.println(list.size());
			
			return mapping.findForward("list");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}

	

	/*public AskManager getAskManager() {
		return askManager;
	}

	public void setAskManager(AskManager askManager) {
		this.askManager = askManager;
	}*/

	public AskAnswerManager getAskAnswerManager() {
		return askAnswerManager;
	}

	public void setAskAnswerManager(AskAnswerManager askAnswerManager) {
		this.askAnswerManager = askAnswerManager;
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String returnUrl = request.getParameter("returnUrl");
		try{
			String levelID     = request.getParameter("levelID");
			String userlevelId = ""; //`
			System.out.println(levelID);
			String levelIDs [] = levelID.split("`");
			
			for(int i=0; i<levelIDs.length; i++) {
				userlevelId = levelIDs[i];
				System.out.println(userlevelId);

				AskAnswer askAnswer = askAnswerManager.getAskAnswer(Long.parseLong(userlevelId));
				askAnswerManager.deleteAskAnswer(askAnswer);
			}
			
		
		}catch( Exception e ){
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
		
		request.setAttribute( "OK_MESSAGE", "删除回答成功！" );
		request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]") );
		return mapping.findForward("ok");
	}
	
	
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String returnUrl   	= request.getParameter("returnUrl");
		String content    	= request.getParameter("content");
		String id	    	= request.getParameter("id");
		
		System.out.println( "contnet = " + content);
		try {
		
			AskAnswer askAnswer = askAnswerManager.getAskAnswer(Long.parseLong(id));
			askAnswer.setContent(content);
			askAnswerManager.updateAskAnswer(askAnswer);
			
			request.setAttribute( "OK_MESSAGE", "修改用户回答成功！");
			
			
			
			request.setAttribute( "RETURN_URL", new UrlTool().getUrl2(returnUrl, "[|]"));
			return mapping.findForward("ok");

		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("FAIL_MESSAGE", "系统错误，请稍后再试。");
			return mapping.findForward("fail");
		}
	}
	
}