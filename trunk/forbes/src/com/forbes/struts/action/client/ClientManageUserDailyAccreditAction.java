/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.client;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.forbes.hibernate.bean.UcMembers;
import com.forbes.hibernate.bean.UserDailyAccredit;
import com.forbes.service.plan.DailyAccreditManager;
import com.forbes.util.Pager;

/**
 * MyEclipse Struts Creation date: 07-09-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/client/ClientLogin" name="clientLoginForm"
 *                attribute="ClientLoginForm" input="/client/ClientLogin.jsp"
 *                scope="request" validate="true"
 * @struts.action-forward name="success" path="/client/ClientLoginOk.jsp"
 * @struts.action-forward name="fail" path="/client/ClientLoginFail.jsp"
 */
public class ClientManageUserDailyAccreditAction extends DispatchAction {
	/* #com.she.web.form.client.ClientLoginForm Dependency20 */
	/*
	 * Generated Methods
	 */

	private DailyAccreditManager dailyAccreditManager;
	
	public DailyAccreditManager getDailyAccreditManager() {
		return dailyAccreditManager;
	}

	public void setDailyAccreditManager(DailyAccreditManager dailyAccreditManager) {
		this.dailyAccreditManager = dailyAccreditManager;
	}


	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		UcMembers user = (UcMembers) request.getSession()
				.getAttribute("CLIENT");

		String pageNo = request.getParameter("pno");
		String keyword = request.getParameter("keyword");
		String iscomplete = request.getParameter("iscomplete");
		String date = request.getParameter("date");
		String orderby = request.getParameter("orderby");

		
		if(date == null || date.length() == 0) {
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			date = formatter.format(new Date());
		}

		// System.out.println("----------favType:" + favType);

		String parameter = "keyword=" + ((keyword == null) ? " " : keyword)
				+ "iscomplete=" + ((iscomplete == null) ? " " : iscomplete)
				+ "date=" + ((date == null) ? " " : date)
				+ "orderby=" + ((orderby == null) ? " " : orderby);

		Map map = new TreeMap();
		map.put("keyword", keyword);
		map.put("iscomplete", iscomplete);
		map.put("date", date);
		map.put("orderby", orderby);

		int iPageNo = 1;
		try {
			iPageNo = Integer.parseInt(pageNo);
		} catch (Exception e) {

		}

		try {
			Pager pager = new Pager();
			pager.setCntOfPage(10);
			pager.setCurPage(iPageNo);

			List plans = dailyAccreditManager.getDailyAccreditByPage(pager, iPageNo,
					user.getUid().toString(), date, iscomplete, keyword,
					orderby);

			request.setAttribute("PARA", map);
			request.setAttribute("USER_ACCREDIT_LIST", plans);
			request.setAttribute("PAGER", pager);

			return mapping.findForward("list");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	
	public ActionForward complete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		String id = request.getParameter("id");
		String isComplete = request.getParameter("is_complete");

		try {
			UserDailyAccredit accredit = dailyAccreditManager.getDailyAccredit(Integer.parseInt(id));
			accredit.setIsComplete(new Short(isComplete));
			
			dailyAccreditManager.updateDailyAccredit(accredit);
			request.setAttribute("RESULT_MESSAGE", "OK");
			
			return mapping.findForward("ok");
		} catch (Exception e) {
			e.printStackTrace();
			request.setAttribute("RESULT_MESSAGE", "FAIL");
			return mapping.findForward("ok");
			
		}
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//String returnUrl = request.getParameter("returnUrl");
		String accreditID     = request.getParameter("accreditID");
		String id = ""; //`
		System.out.println(accreditID);
		String accreditIDs [] = accreditID.split("`");
		try {
			for(int i=0; i<accreditIDs.length; i++) {
				id = accreditIDs[i];
				System.out.println(id);
				UserDailyAccredit accredit = dailyAccreditManager.getDailyAccredit(Integer.parseInt(id));
				dailyAccreditManager.deleteDailyAccredit(accredit);
			}
			request.setAttribute("RESULT_MESSAGE", "OK");
			return mapping.findForward("ok");
		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("RESULT_MESSAGE", "FAIL");
			return mapping.findForward("ok");
		}
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		UcMembers user = (UcMembers) request.getSession()
				.getAttribute("CLIENT");

		String receiver = request.getParameter("receiver");
		String title = request.getParameter("title");
		String date = request.getParameter("date");
		String limitTime = request.getParameter("limit_time");		
		String content = request.getParameter("content");
		String isComplete = request.getParameter("is_complete");
		
		
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat fullFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		try {
			UserDailyAccredit accredit = new UserDailyAccredit();
			accredit.setUserId(user.getUid());
			accredit.setReceiver(receiver);
			accredit.setDate(dateFormatter.parse(date));
			accredit.setTitle(title);
			accredit.setContent(content);
			if(limitTime !=null && limitTime.length() >0) {
				accredit.setLimitTime(fullFormatter.parse(limitTime));
			}
			else {
				accredit.setLimitTime(null);
			}
			accredit.setIsComplete(new Short(isComplete));
			accredit.setSn(0);
			
			dailyAccreditManager.addDailyAccredit(accredit);
			
			request.setAttribute("RETURN_URL", "ClientAddUserDailyAccredit.jsp");
			
			return mapping.findForward("return");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	
	public ActionForward get(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//String returnUrl = request.getParameter("returnUrl");
		String id = request.getParameter("id");

		try {
			UserDailyAccredit accredit = dailyAccreditManager.getDailyAccredit(Integer.parseInt(id));
			request.setAttribute("USER_DETAILY_ACCREDIT", accredit);
			return mapping.findForward("get");
		}catch( Exception e ){
			e.printStackTrace();
			request.setAttribute("RESULT_MESSAGE", "FAIL");
			return mapping.findForward("ok");
		}
	}
	
	
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		String id = request.getParameter("id");
		String receiver = request.getParameter("receiver");
		String title = request.getParameter("title");
		String date = request.getParameter("date");
		String limitTime = request.getParameter("limit_time");		
		String content = request.getParameter("content");
		String isComplete = request.getParameter("is_complete");
		
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat fullFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		try {
			UserDailyAccredit accredit = dailyAccreditManager.getDailyAccredit(Integer.parseInt(id));
			accredit.setDate(dateFormatter.parse(date));
			accredit.setReceiver(receiver);			
			accredit.setTitle(title);
			accredit.setContent(content);
			if(limitTime !=null && limitTime.length() >0) {
				accredit.setLimitTime(fullFormatter.parse(limitTime));
			}
			else {
				accredit.setLimitTime(null);
			}
			
			accredit.setIsComplete(new Short(isComplete));
			accredit.setSn(0);
			
			dailyAccreditManager.updateDailyAccredit(accredit);
			
			//request.setAttribute("RETURN_URL", "ClientManageUserDailyAccredit.do?act=edit&id="+id);
			
			return mapping.findForward("return");
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("fail");
		}
	}
	
}