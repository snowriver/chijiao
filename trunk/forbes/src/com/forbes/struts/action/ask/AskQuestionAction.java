/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.forbes.struts.action.ask;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.forbes.exception.ForbesException;
import com.forbes.hibernate.bean.Ask;
import com.forbes.hibernate.bean.AskType;
import com.forbes.hibernate.bean.UcMembers;
import com.forbes.hibernate.bean.User;
import com.forbes.hibernate.bean.UserDetail;
import com.forbes.service.account.ScoreManager;
import com.forbes.service.ask.AskManager;
import com.forbes.service.ask.AskSearchManager;
import com.forbes.service.ask.AskTypeManager;
import com.forbes.service.client.ClientModifyProfile;
import com.forbes.service.user.UserInfoManager;
import com.forbes.util.DictionaryManager;
import com.forbes.util.Pager;

/** 
 * MyEclipse Struts
 * Creation date: 07-09-2007
 * 
 * XDoclet definition:
 * @struts.action path="/client/ClientLogin" name="clientLoginForm" attribute="ClientLoginForm" input="/client/ClientLogin.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/client/ClientLoginOk.jsp"
 * @struts.action-forward name="fail" path="/client/ClientLoginFail.jsp"
 */
public class AskQuestionAction extends DispatchAction {
	/*#com.she.web.form.client.ClientLoginForm Dependency20*/
/*
	 * Generated Methods
	 */

	private AskManager askManager;
	
	private AskSearchManager askSearchManager;
	
	private ClientModifyProfile clientModifyProfile;
	
	private AskTypeManager askTypeManager;
	
	private UserInfoManager userInfoManager;
	
	private  ScoreManager scoreManager;
	
	public ActionForward first(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ForbesException {
		
		//UserLoginForm userLoginForm = (UserLoginForm) form;
		String keyword = request.getParameter("keyword");
		
		UcMembers ucMember = (UcMembers)request.getSession().getAttribute("CLIENT");
		if(ucMember == null || ucMember.getUserDetail() == null) {
			request.setAttribute("FAIL_MESSAGE", "您还没登录！请登录！");
			return mapping.findForward("fail");
		}

		//UserDetail detail = clientModifyProfile.getUserDetail(ucMember);
		//UserDetail detail = ucMember.getUserDetail();
		//request.setAttribute("USER_DETAIL", detail);
		
		request.setAttribute("KEY_WORD", keyword);
		
		Short accountType = DictionaryManager.getInstance().getVal("ACCOUNT_TYPE", "2").getDvalue();
		request.setAttribute("BANLANCE", scoreManager.getBalance(ucMember.getUid().toString(), 
				accountType.toString()));
		
		return mapping.findForward("first");
		
	}

	
	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ForbesException {
		
		//UserLoginForm userLoginForm = (UserLoginForm) form;
		
		String keyword = request.getParameter("keyword");
		String pageNo = request.getParameter("pno");
		
		String parameter = "keyword=" + ( (keyword==null)?" ":keyword );
		
		Map map = new TreeMap();
		map.put("keyword", keyword);
		map.put("parameter", parameter);
			
		int iPageNo = 1;
		try {
			if( pageNo != null ){
				iPageNo = Integer.parseInt( pageNo );
			}
		} catch( Exception e ){ }

		List list = null;
		Pager pager = new Pager();
		pager.setCntOfPage( 10 );
		pager.setCurPage( iPageNo );
		
		list = askSearchManager.getAskByPage(pager, iPageNo, null, null, null, keyword, null);
		
		request.setAttribute( "PARA", map );
		request.setAttribute( "PAGER", pager );
		request.setAttribute("ASK_LIST", list );
		//request.setAttribute("RETURN_URL", "ArticleView.do?id="+id );
		return mapping.findForward("search");
		
	}
	
	public ActionForward second(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ForbesException {
		
		//UserLoginForm userLoginForm = (UserLoginForm) form;
		
		
		UcMembers user = (UcMembers)request.getSession().getAttribute("CLIENT");
		
		if(user == null || user.getUserDetail() == null) {
			request.setAttribute("FAIL_MESSAGE", "您还没登录！请登录！");
			return mapping.findForward("fail");
		}
		//System.out.println("  second  0");
		
		//System.out.println("  user.id =  " + user.getUid());
		String title     = request.getParameter("title");
		String content   = request.getParameter("content");
		String typeid    = request.getParameter("typeid");
		String typeid2   = request.getParameter("typeid2");
		String typename  = request.getParameter("typename");
		String typename2 = request.getParameter("typename2");
		String score     = request.getParameter("score");
		
		
		/*System.out.println("  --------------------->1  ");
		
		System.out.println("  typeid->  " + typeid);
		System.out.println("  typeid2->  " + typeid2);
		System.out.println("  typeid->  ");*/
		Ask ask = new Ask();
		ask.setTitle(title);
		ask.setContent(content);
		if(typeid !=null && typeid.trim().length() > 0) {
			AskType askType = askTypeManager.getAskType(Integer.parseInt(typeid.trim()));
			ask.setAskType(askType);
		}
		if(typeid2 !=null && typeid2.trim().length() > 0) {
			AskType askType2 = askTypeManager.getAskType(Integer.parseInt(typeid2.trim()));
			ask.setAskType2(askType2);
		}
		//System.out.println("  --------------------->2  ");
		//ask.setTypeId(Integer.parseInt(typeid));
		//ask.setTypeId2(Integer.parseInt(typeid2));
		ask.setReward(new Short(score));
		ask.setAnonymous(new Short("0"));
		ask.setBestAnswer(null);
		ask.setDateline(null);
		ask.setDigest(new Short("0"));
		ask.setDisorder(new Short("0"));
		ask.setExpiredTime(new Date());
		ask.setExtra(null);
		ask.setReplies(Integer.parseInt("0"));
		ask.setSolveTime(null);
		ask.setStatus(new Short("0"));
		//ask.setUser(user);
		ask.setUserId(user.getUid());
		ask.setUsername(user.getUsername());
		ask.setViews(Integer.parseInt("0"));
		ask.setIp(request.getRemoteAddr());
		//System.out.println("  second  1");
		
		//积分处理
		Short accountType = DictionaryManager.getInstance().getVal("ACCOUNT_TYPE", "2").getDvalue();
		int amount = 10;
		//System.out.println("accountType = " + accountType);
		String remark = "提问 “" + ask.getTitle() + "” ";
		boolean updateRst = scoreManager.minusScoreByUser(null, ask.getUserId().toString(), 
				accountType.toString(), (int)amount, remark);
		if( updateRst){
			//System.out.println("减少积分成功");
			askManager.askQuestion(user, ask);
		}
		else {
			request.setAttribute("FAIL_MESSAGE", "您的积分不够！");
			//System.out.println("  second  xx");
			return mapping.findForward("fail");
		}
		
		
		/*request.setAttribute("KEY_WORD", keyword );
		request.setAttribute("ASK_LIST", list );*/
		//request.setAttribute("RETURN_URL", "ArticleView.do?id="+id );
		request.setAttribute("ASK", ask);
		//System.out.println("  second  2");
		return mapping.findForward("second");
		
	}

	public AskManager getAskManager() {
		return askManager;
	}


	public void setAskManager(AskManager askManager) {
		this.askManager = askManager;
	}


	public AskSearchManager getAskSearchManager() {
		return askSearchManager;
	}


	public void setAskSearchManager(AskSearchManager askSearchManager) {
		this.askSearchManager = askSearchManager;
	}


	public ClientModifyProfile getClientModifyProfile() {
		return clientModifyProfile;
	}


	public void setClientModifyProfile(ClientModifyProfile clientModifyProfile) {
		this.clientModifyProfile = clientModifyProfile;
	}


	public AskTypeManager getAskTypeManager() {
		return askTypeManager;
	}


	public void setAskTypeManager(AskTypeManager askTypeManager) {
		this.askTypeManager = askTypeManager;
	}


	public UserInfoManager getUserInfoManager() {
		return userInfoManager;
	}


	public void setUserInfoManager(UserInfoManager userInfoManager) {
		this.userInfoManager = userInfoManager;
	}


	public ScoreManager getScoreManager() {
		return scoreManager;
	}


	public void setScoreManager(ScoreManager scoreManager) {
		this.scoreManager = scoreManager;
	}



	
	
}